-----------------------------------------
TEST CASE FOR MYLIST CLASS
-----------------------------------------

-----------------------------------------
Usage: my_list = MyList()
-----------------------------------------
::

    >>> MyList = __import__('1-my_list').MyList



Test 1: MyList inherits all lists attributes and methods

::

    >>> my_list = MyList()
    >>> my_list.append(1)
    >>> my_list.append(4)
    >>> my_list.append(2)
    >>> my_list.append(3)
    >>> my_list.append(5)
    >>> print(my_list)
    [1, 4, 2, 3, 5]


Test 2: Testing MyList method print_sorted. prints the lists
sorted(ascending sort)

::

    >>> my_list = MyList()
    >>> my_list.append(1)
    >>> my_list.append(4)
    >>> my_list.append(2)
    >>> my_list.append(3)
    >>> my_list.append(5)
    >>> my_list.print_sorted()
    [1, 2, 3, 4, 5]


Test 3: Random check

::


    >>> my_list = MyList([5, 2, 9, 1, 7])
    >>> my_list.print_sorted()
    [1, 2, 5, 7, 9]


Test 4: Checking the name of MyList

::

    >>> print(MyList)
    <class '1-my_list.MyList'>


Test 5: Adding other types not int. 

::

    >>> my_list = MyList()
    >>> my_list.append("hello")
    >>> my_list.append(True)
    >>> my_list.append(False)
    >>> my_list.append(["hello", 1, 3, 9])
    >>> my_list.print_sorted()
    Traceback (most recent call last):
    TypeError: '<' not supported between instances of 'bool' and 'str'

Test 6: Random check

::

    >>> my_list = MyList("hello")
    >>> my_list
    ['h', 'e', 'l', 'l', 'o']


::


    >>> my_list.print_sorted()
    ['e', 'h', 'l', 'l', 'o']


Test 7: Testing for empty lists

::
    >>> new_l = MyList()
    >>> new_l.print_sorted()
    []
